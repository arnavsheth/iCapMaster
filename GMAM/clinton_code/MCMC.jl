

#################initial values ofr mcmc)

initmcmc(s::Symbol, args...; kwargs...)=initmcmc(Val(s), args...; kwargs...)

#initialize the means with expectaitons of the priors as appropriate
function baseline_initmcmc(::Val{:priorexpectation}, ::Type{TÎ˜};dims,data,hyper, 
  minvar=eps(Float64)^0.5, additionalÎ˜list...) where TÎ˜<:AbstractModelParameters

  @unpack K, T, P, S, s2allts, s2t, Î”t = dims
  @unpack Ï•0,v,Îº0,Î´0, Î±Î½0,Î¶Î½0,Î±x0,Î¶x0,Î±y0,Î¶y0,Î½max,Î½min, Î²Î”0 = hyper
  @unpack F,y=data

  

  #easy ones first
  Ï• = hyper.Ï•0 |> deepcopy
  Ï‰ = moment(Val{:EÏ‰}(); Îº=Îº0,Î´=Î´0)
  #Ï„x = moment(Val{:EÏ„x}(); Î±x=Î±x0,Î¶x=Î¶x0)
  #Ï„y = moment(Val{:EÏ„y}(); Î±y=Î±y0,Î¶y=Î¶y0)

  #expectation is dependent on variable selection
  #Î³ = floor(Ï‰*K) |> Int |> (Ktrue->[trues(Ktrue); falses(K-Ktrue)]) |> Vector{Bool}
  #start with the mean model
  Î³ = [true; falses(K-1) |> Vector{Bool}]
  Î² = hyper.Î²0 + inv(m.formD(Î³,v)) * hyper.Î²Î”0

  #use a linear interpolation for the initial guess of x
  xinit = missings(Float64, T)
  xinit[1:P] .= 0.0
  for s âˆˆ 1:S
    xinit[(s2t[s]-Î”t+1):(s2t[s])] .= y[s] / Î”t
  end
  x = xinit .|> Float64

  #asserts that we filled x
  @assert sum(x) !== missing

  #get the initial precistion for y from the factor values of x and Ï•
  xÌ‚ = F*Î²
  XÌƒL = formXÌƒL(; x=xÌ‚ , dims)
  yÌƒ = formyÌƒ(;y,x=xÌ‚ ,dims)
  Ï„y = 1/max(var(yÌƒ .- XÌƒL * Ï•), minvar)
  

  #Ï„x is based on the residuals
  Ï„x = 1/max(var(x .- F*Î²), minvar)*(TÎ˜ <: DGPModelParametersGT ? 1.0 : 1/Ï„y)

  
  #intial value of Î½ is from the expectation of the untruncated version of the prior
  Î½ = Î±Î½0/Î¶Î½0
  
  #a reasonable value for Ïˆ is tricky- compute as an expectation implied by previous values (see updating equations)
  Î±Ïˆ = fill(Î½/2 + 0.5,T)
  Î¶Ïˆ = Ï„x*Ï„y/2 .* (x-F*Î²).^2 .+ Î½/2
  Ïˆ = Î±Ïˆ ./ Î¶Ïˆ

  baselineÎ˜list = (;x, Ï•, Î², Î³, Ï‰, Ï„y, Ï„x, Ïˆ, Î½)
  Î˜list = merge(baselineÎ˜list, additionalÎ˜list)
  #need to walk through part of the updating procedure to get the expectations for Î½
  #=Î·1 = sum(log.(Ïˆ) .- Ïˆ) - 2Î¶Î½0
  lpÎ½(Î½) = (T*Î½/2 + Î±Î½0-1)*log(Î½/2) - T*loggamma(Î½/2) + Î½/2 * Î·1
  pÎ½(Î½) = lpÎ½(Î½) |> exp 
  Î½ = moment(Val{:EÎ½}();pÎ½, Î½max, Î½min)=#

  Î˜ = TÎ˜(;Î˜list...)
  #@eval Main t=$Î˜
  return Î˜
end


#fallback
initmcmc(initmethod::Val, args...;kwargs...)=baseline_initmcmc(initmethod, args...; kwargs...)

#g specific variant for the G model
function initmcmc(initmethod::Val, TÎ˜::Type{<:AbstractModelParametersG}; dims, data, hyper)

  #use the inverse expectation of the gamma since usually the inverse here will be used in the distributions
  Ï„Î² = hyper.Î±Î²0/hyper.Î¶Î²0
  Ï„Ï• = hyper.Î±Ï•0/hyper.Î¶Ï•0

  #@eval Main h=$hyper
  #throw("stop")
  
  return baseline_initmcmc(initmethod, TÎ˜; dims, data, hyper, Ï„Î², Ï„Ï•)
end


#draws a parameter from the conditional distribution
#for each parameter, 1) get the conditional distributional parameters
#given all other parameters 2) make the draw and 3) update the current DGP object
function conditionaldraw(Î¸::Symbol, dgp,)


  if Î¸ â‰¡ :Ï•
    @unpack Ï•min, Ï•max = dgp.hyper
    @unpack Î¼Ï•, Î£Ï•, Î›Ï• = updateÎ¸pÏ•(dgp)
    Ï• = draw(:Ï•; Î¼Ï•,Î£Ï•,Î›Ï•,Ï•min,Ï•max)
    return DGP(dgp; Ï•)

  elseif Î¸ â‰¡ :x
    @unpack Î¼x, Î£x = updateÎ¸px(dgp)
    x = draw(:x; Î¼x, Î£x)
    return DGP(dgp; x)

  elseif Î¸ â‰¡ :Ï„y
    @unpack Î±y, Î¶y = updateÎ¸pÏ„y(dgp)
    Ï„y = draw(:Ï„y; Î±y, Î¶y)
    return DGP(dgp; Ï„y)

  elseif Î¸ â‰¡ :Ï„x
    @unpack Î±x, Î¶x = updateÎ¸pÏ„x(dgp)
    Ï„x = draw(:Ï„x; Î±x, Î¶x)
    return DGP(dgp; Ï„x)

  elseif Î¸ â‰¡ :Ï„Ï•
    @unpack Î±Ï•, Î¶Ï• = updateÎ¸pÏ„Ï•(dgp)
    Ï„Ï• = draw(:Ï„Ï•; Î±Ï•, Î¶Ï•)
    return DGP(dgp; Ï„Ï•)  

  elseif Î¸ â‰¡ :Ï„Î²
    @unpack Î±Î², Î¶Î² = updateÎ¸pÏ„Î²(dgp)
    Ï„Î² = draw(:Ï„Î²; Î±Î², Î¶Î²)
    return DGP(dgp; Ï„Î²)  

  elseif Î¸ â‰¡ :Î²
    @unpack Î¼Î², Î£Î² = updateÎ¸pÎ²(dgp)
    Î² = draw(:Î²; Î¼Î², Î£Î²)  
    return DGP(dgp; Î²)

  #a bit more complex as the diagonal and the general scenarios are substantively different
  #=elseif Î¸ âˆˆ (:Î³_det, :Î³_rand) && typeof(dgp.hyper.A0)<:Diagonal
      @unpack pÎ³ = updateÎ¸pÎ³(dgp)
      Î³ = draw(:Î³; pÎ³)
      return DGP(dgp; Î³)=#
  elseif Î¸ âˆˆ (:Î³_det, :Î³_rand)# && typeof(dgp.hyper.A0)<:Matrix
      dgpnew = DGP(dgp; Î³=deepcopy(dgp.Î˜.Î³)) #will update this in-place, so form the new dgp early
      ks = collect(1:dgp.dims.K)
      if Î¸ â‰¡ :Î³_rand
        shuffle!(ks)
      else
        @assert Î¸ â‰¡ :Î³_det
      end

      for k âˆˆ ks
        @unpack pÎ³ = updateÎ¸pÎ³(dgpnew, k, dgpnew.hyper.A0)
        dgpnew.Î˜.Î³[k] = draw(:Î³, pÎ³)
      end
      #print("\n")
    return dgpnew
  elseif Î¸ â‰¡ :Ï‰
    @unpack Îº, Î´ = updateÎ¸pÏ‰(dgp)
    Ï‰ = draw(:Ï‰; Îº, Î´)
    return DGP(dgp; Ï‰)

  elseif Î¸ â‰¡ :Ïˆ
    @unpack Î¶Ïˆ, Î±Ïˆ = updateÎ¸pÏˆ(dgp)
    Ïˆ = draw(:Ïˆ; Î¶Ïˆ, Î±Ïˆ) 
    return DGP(dgp; Ïˆ)
    
  #the below is a bit more complex due to the history required for Metropolis-Hastings
  elseif Î¸ â‰¡ :Î½
    @unpack rÎ½dist, lrÎ½ = dgp.hyper
    Î½tM1 = dgp.Î˜.Î½

    lpÎ½ = updateÎ¸pÎ½(dgp).lpÎ½
    Î½ = draw(:Î½; rÎ½dist, lrÎ½, Î½tM1, lpÎ½)
    return DGP(dgp; Î½)

  
  #not technically an update, at least until we start handling missing data
  elseif Î¸ â‰¡ :y
    throw("Cannot draw y as a parameter. Missing values not (yet) supported!")
  else
    throw("unrecognized value of Î¸ \'$Î¸\' for conditional draw")
  end

  @assert false
end





function mcmc(tapedeck::Ttapedeck; dgp::DGP, 
    stoprule,
    maxrecords,
    samplerecyclefrac=PARAM[:samplerecyclefrac],
    sampleexpandmethod=PARAM[:sampleexpandmethod],
    verbose=true
    ) where Ttapedeck<:Function

  @unpack dims, hyper,  = dgp
  @unpack numchains = dgp.records



  #create a DGP for each chain
  dgps = [DGP(dgp; copyÎ˜=true) for c âˆˆ 1:numchains]



  #we will stop this via the stopping rule at the end (Julia has no do-while loop)
  while true
    @unpack records=dgp
    @unpack numrecords,numsamplerecords,numburnrecords = records

    @assert numrecords â‰¤ maxrecords

    @assert allequal(records.lastrecord)
    lastrecord=records.lastrecord[1]
    @assert  lastrecord â‰¤ numrecords


    p=Progress((numrecords-lastrecord)*numchains,dt=1, showspeed=true)
    for r âˆˆ (lastrecord+1):numrecords
      for c âˆˆ 1:numchains      
        for Î¸ âˆˆ tapedeck()
          dgps[c] = conditionaldraw(Î¸, dgps[c])
        end
        record!(dgps[c], chainnum=c)
        next!(p) #note- apparently this is thread-safe
      end
    end
    
    println()
    #now set the termination conditions
    checkresults = checkstoprule(stoprule; dgp, verbose, )
    checkresults.stop && break
    if numrecords == maxrecords
      @warn "Max iterations $maxrecords reached. 
        MCMC failed to converge according to stopping rule $stoprule rule. 
        Terminating chain- hope for the best ðŸ¤ž"
      break
    end
    

    #now need to expand the records object
  
    if sampleexpandmethod â‰¡ :fixed
      sampleexpandfrac = PARAM[:samplefixedexpandfrac]
    elseif sampleexpandmethod â‰¡ :heuristic
      sampleexpandfrac = checkresults.heuristicexpandfrac
    else
      throw("Unrecognized sampleexpandmethod $sampleexpandmethod")
    end
    expanded =expandchainrecords(; 
      dgp, 
      samplerecyclefrac, 
      sampleexpandfrac,
      maxrecords)
    verbose && (@info "Convergence not reached, expanding records. 
      numsamplesize increased from $(numsamplerecords) to $(expanded.numsamplerecords); 
      numrecords increased from $numrecords to $(expanded.numrecords) (max=$maxrecords)")
    dgp = DGP(dgp; records=expanded)
    dgps = [DGP(dgps[c]; records=expanded) for c âˆˆ 1:numchains]
    
  end

  rescale!(dgp)

  return dgp
end

rescale!(::AbstractDGP) = nothing
function rescale!(dgp::AbstractDGP{<:DGPModelParametersGIR})
  @unpack dims, records = dgp
  @unpack T = dims

  records.Î² .*= 1/sqrt(T)

  return nothing
end

gettapedeck(mcmcruntype::Symbol, dgp::DGP) = gettapedeck(mcmcruntype|>Val, dgp)
gettapedeck(::Val{:deterministic1}, ::DGP{<:DGPModelParameters}) = ()->[:Ï‰,:Î³_det,:Î½,:Ïˆ,:Î²,:x,:Ï•,:Ï„y,:Ï„x,]
gettapedeck(::Val{:shuffle1}, ::DGP{<:DGPModelParameters}) = ()->shuffle([:Ï‰,:Î³_rand,:Î½,:Ïˆ,:Î²,:x,:Ï•,:Ï„y,:Ï„x,])

gettapedeck(::Val{:deterministic1}, ::DGP{<:AbstractModelParametersG}) = ()->[:Ï‰,:Ï„Ï•,:Ï„Î², :Î³_det,:Î½,:Ïˆ,:Î²,:x,:Ï•,:Ï„y,:Ï„x,]
gettapedeck(::Val{:shuffle1}, ::DGP{<:AbstractModelParametersG}) = ()->shuffle([:Ï‰,:Ï„Ï•,:Ï„Î²,:Î³_rand,:Î½,:Ïˆ,:Î²,:x,:Ï•,:Ï„y,:Ï„x,])


mcmc(mcmcruntype, dgp::DGP; kwargs...) = mcmc(gettapedeck(mcmcruntype, dgp); dgp, kwargs...)



function profilemcmc(mcmcruntype, dgp::DGP{TModelParameters}; testvalues=:all) where TModelParameters
  tapedeck = gettapedeck(mcmcruntype, dgp)

  @info "*********************************************************************************"
  @info "*********************************************************************************"
  @info "*********************************************************************************"

  @info "Profiling model parameters type $TModelParameters with mcmc run type $mcmcruntype"

  #reset the seed
  Random.seed!(11)
  for Î¸ âˆˆ tapedeck()
    (testvalues!==:all) && (Î¸ âˆ‰ testvalues) && continue
    @info "Now profiling $Î¸" 
    b = @benchmark conditionaldraw($Î¸,$dgp)
    display(b)
  end



  if (testvalues â‰¡ :all) || :record âˆˆ testvalues
    @info "Profiling record!"
    b=@benchmark begin
      function placeborecord(dgp)
      
        record!(dgp, chainnum=1)
        dgp.records.lastrecord[1] -= 1
      end
      placeborecord($dgp)
    end
    display(b)
  end

  @info "Profiling completed successfully."
end
